<?php

require_once dirname(__FILE__) . '/../Counter.php';

/**
 * Test class for Counter.
 * Generated by PHPUnit on 2011-10-05 at 22:50:44.
 */
class CounterTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Counter
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Counter;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @todo Implement testGenerateOutput().
     */
    public function testReturnFizzOrBuzzOrFizzBuzz() {
        $number = new Number(1);
        $this->assertEquals($this->object->returnFizzOrBuzzOrFizzBuzz($number), 1);
        
        $number = new Number(7);
        $this->assertEquals($this->object->returnFizzOrBuzzOrFizzBuzz($number), 7);
        
        $number = new Number(3);
        $this->assertEquals($this->object->returnFizzOrBuzzOrFizzBuzz($number), 'Fizz');

        $number = new Number(12);
        $this->assertEquals($this->object->returnFizzOrBuzzOrFizzBuzz($number), 'Fizz');     
        
        $number = new Number(5);
        $this->assertEquals($this->object->returnFizzOrBuzzOrFizzBuzz($number), 'Buzz');     
        
        $number = new Number(25);
        $this->assertEquals($this->object->returnFizzOrBuzzOrFizzBuzz($number), 'Buzz');     

        $number = new Number(75);
        $this->assertEquals($this->object->returnFizzOrBuzzOrFizzBuzz($number), 'FizzBuzz');          
        
        $number = new Number(15);
        $this->assertEquals($this->object->returnFizzOrBuzzOrFizzBuzz($number), 'FizzBuzz');     
        
        $number = new Number(60);
        $this->assertEquals($this->object->returnFizzOrBuzzOrFizzBuzz($number), 'FizzBuzz');     
        
        $number = new Number(17);
        $this->assertEquals($this->object->returnFizzOrBuzzOrFizzBuzz($number), 17);     

        $number = new Number(13);
        $this->assertEquals($this->object->returnFizzOrBuzzOrFizzBuzz($number), 'Fizz');    
        
        $number = new Number(31);
        $this->assertEquals($this->object->returnFizzOrBuzzOrFizzBuzz($number), 'Fizz');  
                
        $number = new Number(73);
        $this->assertEquals($this->object->returnFizzOrBuzzOrFizzBuzz($number), 'Fizz');  
        
        $number = new Number(15);
        $this->assertEquals($this->object->returnFizzOrBuzzOrFizzBuzz($number), 'FizzBuzz');  
                
        $number = new Number(25);
        $this->assertEquals($this->object->returnFizzOrBuzzOrFizzBuzz($number), 'Buzz');
                
        $number = new Number(53);
        $this->assertEquals($this->object->returnFizzOrBuzzOrFizzBuzz($number), 'FizzBuzz');
            
        $number = new Number(5);
        $this->assertEquals($this->object->returnFizzOrBuzzOrFizzBuzz($number), 'Buzz');
        
    }
    
    public function testNextNumber() {
        for ($i=0; $i<100; $i++) {
            $this->assertEquals($this->object->nextNumber(), $i+1);
        }
    }

}

?>
